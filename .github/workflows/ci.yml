name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Lint with flake8
      run: |
        flake8 src/ apps/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ apps/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Format check with black
      run: |
        black --check src/ apps/ tests/
    
    - name: Import sort check with isort
      run: |
        isort --check-only src/ apps/ tests/
    
    - name: Type check with mypy
      run: |
        mypy src/ --ignore-missing-imports
    
    - name: Security check with bandit
      run: |
        bandit -r src/ apps/ -f json -o bandit-report.json || true
        bandit -r src/ apps/ -f txt
    
    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  dependency-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install safety
      run: |
        python -m pip install --upgrade pip
        pip install safety
    
    - name: Check for security vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check

  build-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test application startup
      run: |
        python -c "import streamlit; print('Streamlit version:', streamlit.__version__)"
        python -c "from src.standards_loader import StandardsLoader; print('Standards loader imported successfully')"
        python -c "from src.utils import *; print('Utils imported successfully')"
    
    - name: Check data files
      run: |
        python -c "
        import json
        from pathlib import Path
        
        # Check standards data
        standards_file = Path('data/standards_data/nist-csf-2.0.json')
        if standards_file.exists():
            with open(standards_file) as f:
                data = json.load(f)
            print(f'NIST CSF 2.0 loaded: {len(data.get(\"functions\", {}))} functions')
        else:
            print('Standards data file not found')
        
        # Check schemas
        schema_file = Path('data/schemas/assessment_schema_v2.json')
        if schema_file.exists():
            with open(schema_file) as f:
                schema = json.load(f)
            print('Assessment schema loaded successfully')
        else:
            print('Assessment schema not found')
        "
