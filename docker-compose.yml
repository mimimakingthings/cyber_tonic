version: '3.8'

services:
  cyber-tonic:
    build: .
    container_name: cyber-tonic-app
    ports:
      - "8501:8501"  # Main app
      - "8502:8502"  # Standards Navigator
      - "8503:8503"  # Client Portal
      - "8000:8000"  # API (if enabled)
    volumes:
      - ./data:/app/data
      - ./assets:/app/assets
    environment:
      - PYTHONPATH=/app
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Redis for caching (future enhancement)
  redis:
    image: redis:7-alpine
    container_name: cyber-tonic-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    profiles:
      - cache

  # Optional: PostgreSQL for production data storage (future enhancement)
  postgres:
    image: postgres:15-alpine
    container_name: cyber-tonic-postgres
    environment:
      POSTGRES_DB: cybertonic
      POSTGRES_USER: cybertonic
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-cybertonic123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    profiles:
      - database

  # Optional: Nginx reverse proxy (production)
  nginx:
    image: nginx:alpine
    container_name: cyber-tonic-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - cyber-tonic
    restart: unless-stopped
    profiles:
      - production

volumes:
  redis_data:
  postgres_data:

networks:
  default:
    name: cyber-tonic-network
